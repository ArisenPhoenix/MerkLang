Node ClassCall::evaluate(SharedPtr<Scope> callScope, [[maybe_unused]] SharedPtr<ClassInstanceNode> instanceNode) const {
    DEBUG_FLOW(FlowLevel::PERMISSIVE);
    if (!callScope){throw MerkError("Initial Scope Failed in ClassCall::evaluate()");}
    if (!getScope()) {throw MerkError("ClassCall::evaluate(): getScope() is null");}
    Vector<Node> argValues = handleArgs(callScope);

    // auto classOpt = callScope->getClass(name);
    // if (!classOpt.has_value()) {throw MerkError("Class not found: " + name);}

    // auto classSig = classOpt.value();

    // auto classTemplate = classSig->getClassDef();
    // auto capturedScope = classTemplate->getCapturedScope();
    // auto capturedClone = capturedScope->clone(true);  // clone it safely
    // auto classScope = classTemplate->getClassScope();

    // SharedPtr<Scope> instanceScope = capturedClone->makeInstanceScope(classTemplate->getClassScope());
    // capturedClone->appendChildScope(instanceScope);
    // if (!instanceScope){throw MerkError("InstanceScope creation failed in ClassCall::evaluate()");}

    
    // // callScope->appendChildScope(instanceScope);

    // auto captured = instanceScope->getParent();
    // capturedClone->owner = generateScopeOwner("InstanceCaptured", classTemplate->getName());
    // if (!captured){throw MerkError("Captured Scope Does Not Exist When Instantiating class: " + classTemplate->getName());}
    // if (!captured->has(instanceScope)){captured->printChildScopes();instanceScope->printChildScopes();throw MerkError("Instance Scope does not live in captured Scope");} 
    // else {DEBUG_LOG(LogLevel::PERMISSIVE, "Instance Scope Lives in Captured Scope");}
    // auto params = classTemplate->getParameters().clone();
    // DEBUG_LOG(LogLevel::PERMISSIVE, "PASSED PARAMS For ClassCall::evaluate");

    // instanceScope->owner = generateScopeOwner("ClassInstance", classTemplate->getName());
    // SharedPtr<ClassInstance> instance = makeShared<ClassInstance>(classTemplate->getQualifiedName(), captured, instanceScope, params, classTemplate->getQualifiedAccessor());
    // // SharedPtr<ClassInstanceNode> classInstance = makeShared<ClassInstanceNode>(instance)
    // DEBUG_LOG(LogLevel::PERMISSIVE, "ABOUT to construct instance");

    // instance->construct(argValues, instance); 
    // DEBUG_LOG(LogLevel::PERMISSIVE, "Instance Constructed");

    // DEBUG_FLOW_EXIT();
    // return ClassInstanceNode(instance);
}


Node MethodDef::evaluate(SharedPtr<Scope> scope, [[maybe_unused]] SharedPtr<ClassInstanceNode> instanceNode) const {
    DEBUG_FLOW(FlowLevel::PERMISSIVE);

    if (!scope){
        throw MerkError("Provided Scope to MethodDef::evaluate is null");
    }

    if (!getScope()){
        throw MerkError("MethodDef::evaluate, scope is null");
    }

    if (!getClassScope()) {
        throw MerkError("Class Scope was not supplied to Method: " + name);
    }

    // auto freeVarNames = body->collectFreeVariables();
    // DEBUG_LOG(LogLevel::TRACE,"MethodDef::evaluate | ", "CallType: ", callableTypeAsString(callType), "SubType: ", callableTypeAsString(methodType));
    
    // if (callType == CallableType::FUNCTION){
    //     FreeVars tempFreeVars = freeVarNames;
    //     for (auto& param : parameters){
    //         auto it = tempFreeVars.find(param.getName()); // find a matching param name
    //         if (it != tempFreeVars.end()){                // indicates a match
    //             tempFreeVars.erase(it);
    //         }
    //     }

        
    //     if (tempFreeVars.size() > 0){
    //         std::ostringstream oss;
    //         for (auto& var : tempFreeVars){
    //             DEBUG_LOG(LogLevel::TRACE, highlight("'", Colors::yellow), highlight(var, Colors::purple), highlight("'", Colors::yellow), " ");
    //         }
    //         throw MerkError("The Following Vars: " + oss.str() + "; were defined outside of function defined using function");
    //     }
    // } 
    

    // SharedPtr<Scope> defScope = scope->detachScope(freeVarNames);

    // if (!defScope){
    //     throw MerkError("defScope created in MethodDef::evaluate is null");
    // }

    // defScope->isCallableScope = true;
    // defScope->owner = generateScopeOwner("MethodDef", name); 

    // if (!body->getScope()){
    //     DEBUG_LOG(LogLevel::ERROR, "Body's Scope is null in FunctionDef::evaluate()");
    //     throw MerkError("Scope not present in FunctionDef::evaluate(scope)");
    // }

    // UniquePtr<BaseAST> clonedBodyBase = body->clone();
    // auto clonedBody = static_unique_ptr_cast<MethodBody>(std::move(clonedBodyBase));
    // // clonedBody->setNonStaticElements(nonStaticElements);
    
    // if (!clonedBody){
    //     throw MerkError("ClonedBody in MethodDef::evaluate is null");
    // }
 
    // if (!clonedBody->getScope()){
    //     DEBUG_LOG(LogLevel::ERROR, "Body's Scope is null in FunctionDef::evaluate()");
    //     throw MerkError("Scope not present in FunctionDef::evaluate(scope) of clonedBody");
    // }

    // DEBUG_LOG(LogLevel::TRACE, "FunctionDef Defining Scope: ", scope->getScopeLevel());
    
    // SharedPtr<Method> method = makeShared<Method>(name, parameters, std::move(clonedBody), getScope(), callType);
    
    // if (!method){
    //     throw MerkError("Method created in MethodDef::evaluate is null");
    // }
    
    // method->setSubType(methodType);
    // method->setScope(defScope);
    // method->setCapturedScope(defScope);

    // auto methodSig = method->toCallableSignature();

    // getClassScope()->registerFunction(name, methodSig);

    // DEBUG_LOG(LogLevel::TRACE, highlight("Registered Method: " + name, Colors::yellow), "into: ", getClassScope().get(), "Owner: ", getClassScope()->owner);

    // DEBUG_LOG(LogLevel::TRACE, "Method", name, "registered to ", classScope->owner);

    // if (!defScope){
    //     DEBUG_FLOW_EXIT();
    //     throw MerkError("Defining Scope for FunctionDef::evaluate is null");
    // }

    // if (!method->getBody()){
    //     DEBUG_FLOW_EXIT();
    //     throw MerkError("Function body is null in FunctionDef::evaluate");
    // }

    // // Wrap it in a FunctionNode (for returning it as a value)
    // MethodNode methodNode(method);

    // DEBUG_FLOW_EXIT();
    // return methodNode;
}