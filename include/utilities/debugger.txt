//// Always define FUNCTION_SIGNATURE regardless of logging state
// #ifdef _MSC_VER
//   #define FUNCTION_SIGNATURE __FUNCSIG__
// #else
//   #define FUNCTION_SIGNATURE __PRETTY_FUNCTION__
// #endif




// #if ENABLE_DEBUG_LOGGING
//   #define DEBUG_LOG(level, ...) Debugger::getInstance().log(level, __FILE__, __LINE__, __VA_ARGS__)
//   #define DEBUG_FLOW(...) \
//       auto __DEBUG_FLOW_EXIT__ = flowEnterHelper(FUNCTION_SIGNATURE, __VA_OPT__(__VA_ARGS__, ) __FILE__, __LINE__)
//   #define DEBUG_FLOW_EXIT() __DEBUG_FLOW_EXIT__()
// #else
//   #define DEBUG_LOG(level, ...) do {} while (0)
//   #define DEBUG_FLOW(...) do {} while (0)
//   #define DEBUG_FLOW_EXIT() do {} while (0)
// #endif

// #define MARK_UNUSED(...) (void)(sizeof...(int[]{((void)(__VA_ARGS__), 0)...}))
// #if ENABLE_DEBUG_LOGGING
//     // Do nothing, let the arguments be used in DEBUG_LOG macros
//     #define MARK_UNUSED_MULTI(...) do {} while (0)
// #else
//     // Suppress unused warnings when debug logging is disabled
//     #define MARK_UNUSED_MULTI(...) \
//         do { (void)([](auto&&... args){ ((void)args, ...); }(__VA_ARGS__)); } while (0)
// #endif







#define DEBUG_LOG(level, ...) Debugger::getInstance().log(level, __FILE__, __LINE__, __VA_ARGS__)
#define DEBUG_FLOW(...) \
    auto __DEBUG_FLOW_EXIT__ = flowEnterHelper(FUNCTION_SIGNATURE, __VA_OPT__(__VA_ARGS__, ) __FILE__, __LINE__)
#define DEBUG_FLOW_EXIT() __DEBUG_FLOW_EXIT__()
#define MARK_UNUSED_MULTI(...) \
    do { (void)([](auto&&... args){ ((void)args, ...); }(__VA_ARGS__)); } while (0)


